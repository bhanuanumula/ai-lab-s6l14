# A* Algorithm Implementation in Python
# -------------------------------------

def a_star_algorithm(start_node, stop_node):
    """
    Perform A* algorithm to find the optimal path from start_node to stop_node.

    Parameters:
    start_node (str): Starting node
    stop_node (str): Goal node

    Returns:
    list: Optimal path from start to goal
    """
    open_set = set([start_node])   # Nodes to be evaluated
    closed_set = set()             # Nodes already evaluated
    g = {}                         # Distance from start_node
    parents = {}                   # Parent of each node

    # Initialize starting node
    g[start_node] = 0
    parents[start_node] = start_node

    while open_set:
        n = None

        # Find node with lowest f(n) = g(n) + h(n)
        for v in open_set:
            if n is None or g[v] + heuristic(v) < g[n] + heuristic(n):
                n = v

        if n is None:
            print("Path does not exist!")
            return None

        # Goal node reached
        if n == stop_node:
            path = []
            while parents[n] != n:
                path.append(n)
                n = parents[n]
            path.append(start_node)
            path.reverse()
            print("Path found:", path)
            return path

        # Explore neighbors
        for m, weight in get_neighbors(n):
            if m not in open_set and m not in closed_set:
                open_set.add(m)
                parents[m] = n
                g[m] = g[n] + weight
            else:
                if g[m] > g[n] + weight:
                    g[m] = g[n] + weight
                    parents[m] = n
                    if m in closed_set:
                        closed_set.remove(m)
                        open_set.add(m)

        # Move current node from open to closed set
        open_set.remove(n)
        closed_set.add(n)

    print("Path does not exist!")
    return None


def get_neighbors(node):
    """Return neighbors and edge weights of a node."""
    return Graph_nodes.get(node, [])


def heuristic(node):
    """Return heuristic value (h) for a given node."""
    h_values = {
        'A': 11, 'B': 6, 'C': 5, 'D': 7, 'E': 3,
        'F': 6, 'G': 5, 'H': 3, 'I': 1, 'J': 0
    }
    return h_values.get(node, 0)


# Define graph as adjacency list with edge weights
Graph_nodes = {
    'A': [('B', 6), ('F', 3)],
    'B': [('A', 6), ('C', 3), ('D', 2)],
    'C': [('B', 3), ('D', 1), ('E', 5)],
    'D': [('B', 2), ('C', 1), ('E', 8)],
    'E': [('C', 5), ('D', 8), ('I', 5), ('J', 5)],
    'F': [('A', 3), ('G', 1), ('H', 7)],
    'G': [('F', 1), ('I', 3)],
    'H': [('F', 7), ('I', 2)],
    'I': [('E', 5), ('G', 3), ('H', 2), ('J', 3)],
}

# Driver code
if _name_ == "_main_":
    print("Following is the A* Algorithm:")
    a_star_algorithm('A', 'J')
