# Mini-Max Algorithm with Alpha-Beta Pruning
# ------------------------------------------

# Initial values for Alpha and Beta
MAX, MIN = 1000, -1000


def minimax(depth, node_index, maximizing_player, values, alpha, beta):
    """
    Perform Mini-Max algorithm with Alpha-Beta pruning.

    Parameters:
    depth (int): Current depth in game tree
    node_index (int): Index of current node in values array
    maximizing_player (bool): True if it's maximizer's move, else False
    values (list): List of leaf node values
    alpha (int): Best (maximum) value that maximizer can guarantee
    beta (int): Best (minimum) value that minimizer can guarantee

    Returns:
    int: Optimal value for the current player
    """

    # Termination condition: when leaf node is reached
    if depth == 3:
        return values[node_index]

    if maximizing_player:
        best = MIN

        # Recur for left and right child nodes
        for i in range(2):
            val = minimax(depth + 1, node_index * 2 + i, False, values, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)

            # Alpha-Beta Pruning
            if beta <= alpha:
                break

        return best

    else:
        best = MAX

        # Recur for left and right child nodes
        for i in range(2):
            val = minimax(depth + 1, node_index * 2 + i, True, values, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)

            # Alpha-Beta Pruning
            if beta <= alpha:
                break

        return best


# Driver Code
if _name_ == "_main_":
    # Leaf node values of the game tree
    values = [3, 5, 6, 9, 1, 2, 0, -1]

    print("Following is the Mini-Max Algorithm with Alpha-Beta Pruning:")
    optimal_value = minimax(0, 0, True, values, MIN, MAX)
    print("The optimal value is:", optimal_value)
