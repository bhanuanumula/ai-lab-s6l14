# TASK 6: Map Coloring Problem using Constraint Satisfaction Approach

class Graph:
    def _init_(self, vertices):
        # Initialize number of vertices
        self.v = vertices
        # Initialize adjacency matrix
        self.graph = [[0 for column in range(vertices)] for row in range(vertices)]

    # Utility function to check if current color assignment is safe for vertex v
    def is_safe(self, v, color, c):
        for i in range(self.v):
            # If vertex v is adjacent to vertex i and both have the same color
            if self.graph[v][i] == 1 and color[i] == c:
                return False
        return True

    # Recursive utility function to solve the m-coloring problem
    def graph_color_util(self, m, color, v):
        # If all vertices are assigned a color, return True
        if v == self.v:
            return True

        # Try different colors for vertex v
        for c in range(1, m + 1):
            if self.is_safe(v, color, c):
                color[v] = c  # Assign color c
                if self.graph_color_util(m, color, v + 1):
                    return True
                # If assigning color c doesn't lead to a solution, remove it (backtrack)
                color[v] = 0
        return False

    # Function to solve the problem using m colors
    def graph_coloring(self, m):
        color = [0] * self.v
        if not self.graph_color_util(m, color, 0):
            print("No solution exists.")
            return False

        # Print the solution
        print("Solution exists and following are the assigned colors:")
        for c in color:
            print(c, end=" ")
        print()
        return True


# -------------------------------
# Driver Code
# -------------------------------
if _name_ == '_main_':
    # Create graph with 4 vertices
    g = Graph(4)

    # Adjacency matrix representing the map
    g.graph = [
        [0, 1, 1, 1],
        [1, 0, 1, 0],
        [1, 1, 0, 1],
        [1, 0, 1, 0]
    ]

    # Number of colors
    m = 3

    # Function call
    g.graph_coloring(m)
