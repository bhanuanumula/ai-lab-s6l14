# Hill Climbing Algorithm (Heuristic Search)
# ------------------------------------------

def hill_climbing(problem, heuristic):
    """
    Perform Hill Climbing to find a solution for the given problem.
    
    Parameters:
    problem (list or any structure): Initial state representation
    heuristic (function): Function to calculate heuristic value of a state

    Returns:
    tuple: (solution_state, heuristic_value)
    """
    current = problem               # Start with the initial state
    while True:
        neighbors = get_neighbors(current)  # Generate neighbors of current state
        if not neighbors:
            break  # No neighbors, local maximum reached

        # Choose the neighbor with the best (lowest) heuristic value
        next_state = min(neighbors, key=heuristic)

        # If neighbor is worse than current, we have reached a peak
        if heuristic(next_state) >= heuristic(current):
            break

        current = next_state  # Move to the better neighbor

    return current, heuristic(current)

def get_neighbors(state):
    """
    Generate neighbors for a given state.
    Modify this function according to your problem constraints.
    """
    neighbors = []
    for i in range(len(state)):
        # Increment and decrement each element to generate neighbors
        if state[i] + 1 <= 10:  # Example constraint (max value = 10)
            neighbor = state.copy()
            neighbor[i] += 1
            neighbors.append(neighbor)
        if state[i] - 1 >= 0:  # Example constraint (min value = 0)
            neighbor = state.copy()
            neighbor[i] -= 1
            neighbors.append(neighbor)
    return neighbors

def heuristic(state):
    """
    Example heuristic function.
    Lower value is better.
    For demonstration: negative sum of elements (aim to maximize sum)
    """
    return -sum(state)

# Driver code
if _name_ == "_main_":
    initial_state = [0, 0, 0]  # Starting state
    solution, h_value = hill_climbing(initial_state, heuristic)
    print("Solution state:", solution)
    print("Heuristic value of solution:", h_value)
